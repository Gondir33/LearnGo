// Code generated by mockery v2.38.0. DO NOT EDIT.

package main

import (
	time "time"

	mock "github.com/stretchr/testify/mock"
)

// MockExchanger is an autogenerated mock type for the Exchanger type
type MockExchanger struct {
	mock.Mock
}

// GetCandlesHistory provides a mock function with given fields: pair, limit, start, end
func (_m *MockExchanger) GetCandlesHistory(pair string, limit int, start time.Time, end time.Time) (CandlesHistory, error) {
	ret := _m.Called(pair, limit, start, end)

	if len(ret) == 0 {
		panic("no return value specified for GetCandlesHistory")
	}

	var r0 CandlesHistory
	var r1 error
	if rf, ok := ret.Get(0).(func(string, int, time.Time, time.Time) (CandlesHistory, error)); ok {
		return rf(pair, limit, start, end)
	}
	if rf, ok := ret.Get(0).(func(string, int, time.Time, time.Time) CandlesHistory); ok {
		r0 = rf(pair, limit, start, end)
	} else {
		r0 = ret.Get(0).(CandlesHistory)
	}

	if rf, ok := ret.Get(1).(func(string, int, time.Time, time.Time) error); ok {
		r1 = rf(pair, limit, start, end)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetClosePrice provides a mock function with given fields: pair, limit, start, end
func (_m *MockExchanger) GetClosePrice(pair string, limit int, start time.Time, end time.Time) ([]float64, error) {
	ret := _m.Called(pair, limit, start, end)

	if len(ret) == 0 {
		panic("no return value specified for GetClosePrice")
	}

	var r0 []float64
	var r1 error
	if rf, ok := ret.Get(0).(func(string, int, time.Time, time.Time) ([]float64, error)); ok {
		return rf(pair, limit, start, end)
	}
	if rf, ok := ret.Get(0).(func(string, int, time.Time, time.Time) []float64); ok {
		r0 = rf(pair, limit, start, end)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]float64)
		}
	}

	if rf, ok := ret.Get(1).(func(string, int, time.Time, time.Time) error); ok {
		r1 = rf(pair, limit, start, end)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCurrencies provides a mock function with given fields:
func (_m *MockExchanger) GetCurrencies() (Currencies, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetCurrencies")
	}

	var r0 Currencies
	var r1 error
	if rf, ok := ret.Get(0).(func() (Currencies, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() Currencies); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(Currencies)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOrderBook provides a mock function with given fields: limit, pairs
func (_m *MockExchanger) GetOrderBook(limit int, pairs ...string) (OrderBook, error) {
	_va := make([]interface{}, len(pairs))
	for _i := range pairs {
		_va[_i] = pairs[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, limit)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetOrderBook")
	}

	var r0 OrderBook
	var r1 error
	if rf, ok := ret.Get(0).(func(int, ...string) (OrderBook, error)); ok {
		return rf(limit, pairs...)
	}
	if rf, ok := ret.Get(0).(func(int, ...string) OrderBook); ok {
		r0 = rf(limit, pairs...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(OrderBook)
		}
	}

	if rf, ok := ret.Get(1).(func(int, ...string) error); ok {
		r1 = rf(limit, pairs...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTicker provides a mock function with given fields:
func (_m *MockExchanger) GetTicker() (Ticker, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetTicker")
	}

	var r0 Ticker
	var r1 error
	if rf, ok := ret.Get(0).(func() (Ticker, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() Ticker); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(Ticker)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTrades provides a mock function with given fields: pairs
func (_m *MockExchanger) GetTrades(pairs ...string) (Trades, error) {
	_va := make([]interface{}, len(pairs))
	for _i := range pairs {
		_va[_i] = pairs[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetTrades")
	}

	var r0 Trades
	var r1 error
	if rf, ok := ret.Get(0).(func(...string) (Trades, error)); ok {
		return rf(pairs...)
	}
	if rf, ok := ret.Get(0).(func(...string) Trades); ok {
		r0 = rf(pairs...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(Trades)
		}
	}

	if rf, ok := ret.Get(1).(func(...string) error); ok {
		r1 = rf(pairs...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockExchanger creates a new instance of MockExchanger. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockExchanger(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockExchanger {
	mock := &MockExchanger{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
