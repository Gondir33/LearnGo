// Code generated by mockery v2.38.0. DO NOT EDIT.

package main

import (
	context "context"

	github "github.com/google/go-github/v53/github"
	mock "github.com/stretchr/testify/mock"
)

// MockReposer is an autogenerated mock type for the Reposer type
type MockReposer struct {
	mock.Mock
}

// List provides a mock function with given fields: ctx, user, opts
func (_m *MockReposer) List(ctx context.Context, user string, opts *github.RepositoryListOptions) ([]*github.Repository, *github.Response, error) {
	ret := _m.Called(ctx, user, opts)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []*github.Repository
	var r1 *github.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *github.RepositoryListOptions) ([]*github.Repository, *github.Response, error)); ok {
		return rf(ctx, user, opts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *github.RepositoryListOptions) []*github.Repository); ok {
		r0 = rf(ctx, user, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*github.Repository)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *github.RepositoryListOptions) *github.Response); ok {
		r1 = rf(ctx, user, opts)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*github.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, *github.RepositoryListOptions) error); ok {
		r2 = rf(ctx, user, opts)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// NewMockReposer creates a new instance of MockReposer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockReposer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockReposer {
	mock := &MockReposer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
